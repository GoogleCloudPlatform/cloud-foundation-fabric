apiVersion: mysql.oracle.com/v2
kind: InnoDBCluster
metadata:
  name: mycluster
spec:
  secretName: mysql-secret
  tlsUseSelfSigned: true
  instances: ${mysql_config.db_replicas}
  version: ${mysql_config.version}
  router:
    instances: ${mysql_config.router_replicas}
    version: ${mysql_config.version}
    podSpec:
      containers:
        - name: mysql-router
          resources:
            limits:
              cpu: "${mysql_config.router_cpu}"
              memory: "${mysql_config.router_memory}"
            requests:
              cpu: "${mysql_config.router_cpu}"
              memory: "${mysql_config.router_memory}"

      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - mysql
              topologyKey: topology.kubernetes.io/zone
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mysql-router
                topologyKey: "topology.kubernetes.io/zone"

  datadirVolumeClaimTemplate:
    accessModes:
      - ReadWriteOnce
    storageClassName: fast-storageclass
    resources:
      requests:
        storage: ${mysql_config.db_database_size}
  imageRepository: ${registry_path}  # can we proxy to: container-registry.oracle.com/mysql ?
  podSpec:
    containers:
      - name: mysql
        resources:
          limits:
            cpu: "${mysql_config.db_cpu}"
            memory: "${mysql_config.db_memory}"
          requests:
            cpu: "${mysql_config.db_cpu}"
            memory: "${mysql_config.db_memory}"
    topologySpreadConstraints:
      - maxSkew: 1
        minDomains: ${min(3, mysql_config.db_replicas)} # ensure that at least three different zones are in use
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: mysql
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - mysql
            topologyKey: "kubernetes.io/hostname"
