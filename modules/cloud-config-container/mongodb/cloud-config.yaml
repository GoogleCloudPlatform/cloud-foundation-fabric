#cloud-config

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

users:
  - name: mongodb
    uid: 999

write_files:
  - path: /var/lib/docker/daemon.json
    permissions: 0644
    owner: root
    content: |
      {
        "live-restore": true,
        "storage-driver": "overlay2",
        "log-opts": {
          "max-size": "1024m"
        }
      }
  %{~ if monitoring_image != null ~}
  - path: /run/mongodb/prometheus/config.yaml
    permissions: 0700
    owner: nobody
    content: |
      global:
        scrape_interval: 30s

      scrape_configs:
      # Let Prometheus scrape itself.
      - job_name: prometheus
        static_configs:
        - targets: ['localhost:9090']
      - job_name: mongodb
        static_configs:
        - targets: ['localhost:9216']
  %{~ endif ~}
  %{~ if admin_username != null && admin_password_secret != null ~}
  - path: /run/mongodb/environment.sh
    permissions: 0700
    owner: root
    content: |
      #!/bin/bash
      docker run \
        --rm --network=host -i -v /run/mongodb:/data google/cloud-sdk:alpine \
        /bin/bash -c 'echo "MONGO_INITDB_ROOT_USERNAME=${admin_username}" > /data/environment ; \
        echo -n "MONGO_INITDB_ROOT_PASSWORD=" >> /data/environment ; \
        gcloud secrets versions access ${admin_password_secret} >> /data/environment'
  %{~ endif ~}
  %{~ if keyfile_secret != null ~}
  - path: /run/mongodb/keyfile.sh
    permissions: 0700
    owner: root
    content: |
      #!/bin/bash
      mkdir -p /run/mongodb/etc/mongo ; docker run \
        --rm --network=host -i -v /run/mongodb:/data google/cloud-sdk:alpine \
      /bin/bash -c 'gcloud secrets versions access ${keyfile_secret} >> /data/etc/mongo/keyfile'
  %{~ endif ~}
  %{~ if mongo_config != null ~}
  - path: /run/mongodb/etc/mongo/mongod.conf
    permissions: 0644
    owner: mongodb
    content: |
      ${indent(6, mongo_config)}
  %{~ endif ~}
  %{~ if mongo_data_disk != null ~}
  - path: /etc/systemd/system/mongodb-data.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=MongoDB data disk
      ConditionPathExists=/dev/disk/by-id/google-${mongo_data_disk}
      Before=mongodb.service
      [Service]
      Type=oneshot
      ExecStart=/bin/mkdir -p /run/mongodb/data
      ExecStart=/bin/bash -c \
        "/bin/lsblk -fn -o FSTYPE \
          /dev/disk/by-id/google-${mongo_data_disk} |grep xfs \
        || mkfs.xfs \
          /dev/disk/by-id/google-${mongo_data_disk}"
      ExecStart=/bin/bash -c \
        "mount |grep /run/mongodb/data \
        || mount -t xfs -o noatime /dev/disk/by-id/google-${mongo_data_disk} /run/mongodb/data"
      ExecStart=/usr/sbin/xfs_growfs /dev/disk/by-id/google-${mongo_data_disk}
      RemainAfterExit=true
  %{~ endif ~}
  - path: /etc/systemd/system/mongodb.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=MongoDB service
      After=%{~ if mongo_data_disk != null ~}mongodb-data.service %{ endif ~}gcr-online.target docker.socket docker-events-collector.service
      Wants=%{~ if mongo_data_disk != null ~}mongodb-data.service %{ endif ~}gcr-online.target docker.socket
      [Service]
      Environment=HOME=/run/mongodb
      %{~ if admin_username != null && admin_password_secret != null ~}
      ExecStartPre=/run/mongodb/environment.sh
      %{~ endif ~}
      %{~ if keyfile_secret != null ~}
      ExecStartPre=/run/mongodb/keyfile.sh
      %{~ endif ~}
      ExecStartPre=/bin/mkdir -p /run/mongodb/data
      ExecStartPre=/bin/chown -R 999 /run/mongodb/data
      %{~ if mongo_config != null || keyfile_secret != null ~}
      ExecStartPre=/bin/chown -R 999 /run/mongodb/etc
      ExecStartPre=/bin/bash -c "/bin/chmod 0600 /run/mongodb/etc/mongo/*"
      %{~ endif ~}
      ExecStartPre=sysctl -w vm.max_map_count=1677720
      ExecStart=/usr/bin/docker run --rm --name=mongodb \
        --user 999:999 \
        --network host \
        %{~ if admin_username != null && admin_password_secret != null ~}
        --env-file /run/mongodb/environment \
        %{~ endif ~}
        -v /run/mongodb/data:/data/db \
        %{~ if keyfile_secret != null || mongo_config != null ~}
        -v /run/mongodb/etc/mongo:/etc/mongo/ \
        %{~ endif ~}
        ${image} %{ if mongo_config != null } --config /etc/mongo/mongod.conf%{ endif }%{ if keyfile_secret != null } --keyFile /etc/mongo/keyfile%{ endif }
      ExecStop=/usr/bin/docker stop mongodb
  %{~ if healthcheck_image != null ~}
  - path: /etc/systemd/system/mongodb-healthcheck.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=MongoDB healthcheck service
      After=mongodb.service gcr-online.target docker.socket docker-events-collector.service
      Wants=mongodb.service gcr-online.target docker.socket
      [Service]
      Environment=HOME=/run/mongodb
      ExecStart=/usr/bin/docker run --rm --name=mongodb-healthcheck \
        --user 999:999 \
        --network host \
        ${healthcheck_image}
      ExecStop=/usr/bin/docker stop mongodb-healthcheck
  %{~ endif ~}
  %{~ if exporter_image != null ~}
  - path: /etc/systemd/system/mongodb-exporter.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=MongoDB Prometheus exporter service
      After=mongodb.service gcr-online.target docker.socket docker-events-collector.service
      Wants=mongodb.service gcr-online.target docker.socket
      [Service]
      Environment=HOME=/run/mongodb
      EnvironmentFile=/run/mongodb/environment
      ExecStart=/usr/bin/docker run --rm --name=mongodb-exporter \
        --user 999:999 \
        --network host \
        ${exporter_image} --mongodb.uri=mongodb://$${MONGO_INITDB_ROOT_USERNAME}:$${MONGO_INITDB_ROOT_PASSWORD}@127.0.0.1:${mongo_port}/ --collect-all
      ExecStop=/usr/bin/docker stop mongodb-exporter
  %{~ endif ~}
  %{~ if monitoring_image != null ~}
  - path: /etc/systemd/system/mongodb-monitoring.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=MongoDB Prometheus exporter service
      After=mongodb-exporter.service gcr-online.target docker.socket docker-events-collector.service
      Wants=mongodb-exporter.service gcr-online.target docker.socket
      [Service]
      Environment=HOME=/run/mongodb
      ExecStartPre=/bin/chown -R nobody:nobody /run/mongodb/prometheus
      ExecStart=/usr/bin/docker run --rm -v /run/mongodb/prometheus:/prometheus --name=mongodb-monitoring \
        --user nobody:nobody --network host \
        ${monitoring_image} \
        --config.file=/prometheus/config.yaml \
        --storage.tsdb.path=/prometheus/ \
        --storage.tsdb.retention.time=24h \
        --web.enable-lifecycle \
        --storage.tsdb.no-lockfile \
        --web.route-prefix=/
      ExecStop=/usr/bin/docker stop mongodb-monitoring
  %{~ endif ~}
  %{~ if startup_image != null ~}
  - path: /etc/systemd/system/mongodb-startup.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=MongoDB startup service
      After=mongodb.service gcr-online.target docker.socket docker-events-collector.service docker.service
      Wants=mongodb.service gcr-online.target docker.socket
      [Service]
      Environment=HOME=/run/mongodb
      ExecStartPre=/bin/sleep 30
      ExecStart=/usr/bin/docker run --rm --name=mongodb-startup \
        --user 999:999 \
        --network host \
        %{~ if admin_username != null && admin_password_secret != null ~}
        --env-file /run/mongodb/environment \
        %{~ endif ~}
        ${startup_image} /scripts/startup.sh %{ if replica_set != null }-r ${replica_set} %{ endif }%{ if dns_zone != null }-z ${dns_zone} %{ endif }
      ExecStop=/usr/bin/docker stop mongodb-startup 
  - path: /etc/systemd/system/mongodb-shutdown.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=MongoDB shutdown service
      After=mongodb.service gcr-online.target docker.socket docker-events-collector.service stackdriver-logging.service containerd.service docker.service
      [Service]
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/bin/true
      ExecStop=/usr/bin/docker run --rm -i --name=mongodb-shutdown \
        --user 999:999 \
        --network host \
        %{~ if admin_username != null && admin_password_secret != null ~}
        --env-file /run/mongodb/environment \
        %{~ endif ~}
        ${startup_image} /scripts/shutdown.sh %{ if replica_set != null }-r ${replica_set} %{ endif }%{ if dns_zone != null }-z ${dns_zone} %{ endif }
  %{~ endif ~}

bootcmd:
  - systemctl start node-problem-detector

runcmd:
  - iptables -I INPUT 1 -p tcp -m tcp --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT
  - iptables -I INPUT 1 -p tcp -m tcp --dport ${mongo_port} -m state --state NEW,ESTABLISHED -j ACCEPT
  - HOME=/run/mongodb docker-credential-gcr configure-docker --registries="${join(",", artifact_registries)}"
  - systemctl daemon-reload
  %{~ if healthcheck_image != null ~}
  - systemctl start mongodb-healthcheck
  %{~ endif ~}
  - systemctl start mongodb
  %{~ if startup_image != null ~}
  - systemctl start mongodb-startup
  - systemctl start mongodb-shutdown
  %{~ endif ~}
  %{~ if exporter_image != null ~}
  - systemctl start mongodb-exporter
  %{~ endif ~}
  %{~ if monitoring_image != null ~}
  - systemctl start mongodb-monitoring
  %{~ endif ~}
