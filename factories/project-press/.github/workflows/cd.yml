# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: |
  Deploy projects

on:
  push:
    branches: 
    - master
  pull_request: 
    
permissions:
  contents: read
  pull-requests: write

env: 
  GCLOUD_TF_DOWNLOAD: "never"
  TF_IN_AUTOMATION: "yes"

jobs:
  validate-projects:
    name: "Validate projects"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup
      with:
        credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENTS }}

    - name: "Validate projects"
      if: ${{ github.event_name == 'pull_request' }}
      uses: ./.github/actions/validate-projects
      with:
        projects: "projects/*.yaml"
  
    - uses: actions/github-script@v3
      if: ${{ env.VALIDATE_ERROR != '' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            event: "REQUEST_CHANGES",
            body: process.env.VALIDATE_ERROR_TEXT,
            comments: JSON.parse(process.env.VALIDATE_ERROR)
          });
          core.setFailed("Project validation failed");

  validate-changes:
    name: "Validate changes"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup
      with:
        credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENTS }}
      
    - uses: actions/checkout@v2
      if: ${{ github.event_name == 'pull_request' }}
      with:
        ref: 'master'
        path: 'master/'
    
    - name: Get changed files using defaults
      if: ${{ github.event_name == 'pull_request' }}
      id: changed-files
      uses: tj-actions/changed-files@v11.5

    - name: "Validate projects"
      if: ${{ github.event_name == 'pull_request' }}
      uses: ./.github/actions/validate-changes
      with:
        added_files: ${{ steps.changed-files.outputs.added_files }}
        modified_files: ${{ steps.changed-files.outputs.modified_files }}
        deleted_files: ${{ steps.changed-files.outputs.deleted_files }}
        renamed_files: ${{ steps.changed-files.outputs.renamed_files }}
        copied_files: ${{ steps.changed-files.outputs.copied_files }}

    - uses: actions/github-script@v3
      if: ${{ env.VALIDATE_CHANGES_ERROR != '' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            event: "REQUEST_CHANGES",
            body: process.env.VALIDATE_CHANGES_ERROR,
          });
          core.setFailed("Project change validation failed");

    - uses: actions/github-script@v3
      if: ${{ env.VALIDATE_CHANGES_OK != '' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            event: "APPROVE",
            body: process.env.VALIDATE_CHANGES_OK,
          });

  plan:
    name: "Terraform plan"
    runs-on: ubuntu-latest
    needs: [validate-projects, validate-changes]
    concurrency: terraform
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup
      with:
        credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENTS }}

    - name: "Terraform Plan"
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        terraform init

        terraform plan -parallelism=50 -out=$GITHUB_RUN_NUMBER.tfplan

        terraform show -no-color $GITHUB_RUN_NUMBER.tfplan > $GITHUB_RUN_NUMBER.txt
        terraform show -json $GITHUB_RUN_NUMBER.tfplan > $GITHUB_RUN_NUMBER.json

        if ! python scripts/validate-plan.py $GITHUB_RUN_NUMBER.json ; then
            echo 'VALIDATE_PLAN_ERROR<<EOF' >> $GITHUB_ENV
            echo -e ":no_entry: **Plan contains resource deletions, failing!**\n" >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
        fi

    - uses: actions/upload-artifact@v2
      if: ${{ github.event_name == 'pull_request' }}
      with:
        name: terraform-plan
        path: |
          ${{ github.run_number }}.txt
          ${{ github.run_number }}.json
          ${{ github.run_number }}.tfplan

    - uses: actions/github-script@v3
      if: ${{ github.event_name == 'pull_request' && env.VALIDATE_PLAN_ERROR != '' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: process.env.VALIDATE_PLAN_ERROR
          });
          core.setFailed("Project Terraform plan validation failed");

    - uses: actions/github-script@v3
      if: ${{ github.event_name == 'pull_request' && env.VALIDATE_PLAN_ERROR == '' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          let fs = require('fs');
          fs.readFile(process.env.GITHUB_RUN_NUMBER + '.txt', 'utf8', function (err, data) {
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "<details>\n<summary>Terraform execution plan</summary>\n\n```\n" + data + "\n```\n</details>"
            })
          });

    - name: "Terraform Plan"
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        terraform init
        
        terraform plan -parallelism=50 -out=master.tfplan

        terraform show -no-color master.tfplan > master.txt
        terraform show -json master.tfplan > master.json

        if ! python scripts/validate-plan.py master.json ; then
            echo ":no_entry: **Plan contains resource deletions, failing!**"
            exit 1
        fi

    - uses: actions/upload-artifact@v2
      if: ${{ github.event_name != 'pull_request' }}
      with:
        name: terraform-master-plan
        path: |
          master.txt
          master.json
          master.tfplan

  apply:
    name: "Terraform apply"
    runs-on: ubuntu-latest  
    if: ${{ github.event_name != 'pull_request' }}
    needs: [validate-projects, validate-changes, plan]
    concurrency: terraform
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup
      with:
        credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENTS }}

    - uses: actions/download-artifact@v2      
      with:
        name: terraform-master-plan

    - name: "Terraform Apply"
      run: |
        terraform init
        
        terraform apply -input=false master.tfplan

        python scripts/projects-to-bigquery.py --config config/config.yaml projects/
        python scripts/charging-codes-to-gcs.py --config config/config.yaml projects/

