# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

trigger:
- main

variables:
  - name: FAST_SERVICE_ACCOUNT
    value: $(service_accounts.apply)
  - name: FAST_SERVICE_ACCOUNT_PLAN
    value: $(service_accounts.plan)
  - name: FAST_WIF_PROVIDER
    value: $(identity_provider)
  - name: TF_PROVIDERS_FILE
    value: $(tf_providers_files.apply)
  - name: TF_PROVIDERS_FILE_PLAN
    value: $(tf_providers_files.plan)
  - name: TF_VERSION
    value: 1.7.4
  - name: FAST_OUTPUTS_BUCKET
    value: $(outputs_bucket)
  ${{ if ne(length(tf_var_files), 0) }}:
    - name: TF_VAR_FILES
      value: |
        ${{ join('\n', tf_var_files) }}

stages:
- stage: pr
  displayName: Pull Request
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: plan
    displayName: Terraform Plan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      persistCredentials: true
    - task: Cache@2
      displayName: 'Cache Terraform modules and providers'
      inputs:
        key: 'terraform | $(Agent.OS) | ${{ hashFiles(''modules/*'') }} | ${{ hashFiles(''terraform.lock.hcl'') }}'
        path: '.terraform'
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(TF_VERSION)'
    - task: GoogleCloudSdkToolInstaller@0
      displayName: 'Install gcloud CLI'
    - script: |
        # Get an access token for the managed identity
        ACCESS_TOKEN=$(az identity get-token --resource "https://management.azure.com/" --query "accessToken" --output tsv)

        # Configure Git to use the 'manager' credential helper
        git config --global credential.helper manager

        # Authenticate to your Git repository
        git config --global credential.https://dev.azure.com.username ${{ variables.System.AccessToken }}
        git config --global credential.https://dev.azure.com.password $ACCESS_TOKEN 

        gcloud auth activate-service-account --key-file <(echo "$ACCESS_TOKEN")
        gcloud config set auth/credential_file_override $(GOOGLE_CREDENTIALS)
        gcloud storage cp -r "gs://$(FAST_OUTPUTS_BUCKET)/providers/$(TF_PROVIDERS_FILE_PLAN)" ./providers.tf
        ${{ each f in parameters.tf_var_files }}:
          gcloud storage cp gs://$(FAST_OUTPUTS_BUCKET)/tfvars/${{ f }} ./
        ${{ end }}
      displayName: 'Setup Git and GCP Authentication'
    - script: terraform init -no-color
      displayName: 'Terraform Init'
    - script: terraform validate -no-color
      displayName: 'Terraform Validate'
      continueOnError: true
    - script: |
        echo "##vso[task.setvariable variable=TF_VALIDATE_STATUS;]success"
        if [ $? -ne 0 ]; then
          echo "##vso[task.setvariable variable=TF_VALIDATE_STATUS;]failed"
        fi
      displayName: 'Set Validation Status'
    - script: terraform plan -input=false -no-color -lock=false -out=tfplan
      displayName: 'Terraform Plan'
      continueOnError: true
    - script: |
        terraform show -json tfplan > tfplan.json
      displayName: 'Generate JSON Plan Output'
    - task: PowerShell@2
      displayName: 'Post Plan Summary to PR'
      inputs:
        targetType: 'inline'
        script: |
          $planJson = Get-Content -Path "tfplan.json" | ConvertFrom-Json
          $changes = $planJson.resource_changes | Group-Object -Property change.actions
          $createCount = ($changes | Where-Object { $_.Name -eq 'create' }).Count
          $updateCount = ($changes | Where-Object { $_.Name -eq 'update' }).Count
          $deleteCount = ($changes | Where-Object { $_.Name -eq 'delete' }).Count

          $commentBody = @"
          ### Terraform Validation: $(TF_VALIDATE_STATUS)

          ### Terraform Plan:
          
          **Summary:**
          * Create: $createCount
          * Update: $updateCount
          * Delete: $deleteCount

          [See detailed plan output](https://dev.azure.com/$(System.TeamProject)/$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=false&type=publishedArtifacts)
          "@

          $url = "https://dev.azure.com/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads?api-version=6.0" Â  
          $url = $url -replace "{organization}", "$(System.TeamProject)"
          $url = $url -replace "{project}", "$(System.TeamProject)"
          $url = $url -replace "{repositoryId}", "$(Build.Repository.ID)"
          $url = $url -replace "{pullRequestId}", "$(System.PullRequest.PullRequestId)"

          $headers = @{
              Authorization = "Basic $(System.AccessToken)"
              "Content-Type" = "application/json"
          }

          $body = @{
              comments = @(
                  @{
                      commentType = 1
                      content = $commentBody
                  }
              )
              status = 1
          } | ConvertTo-Json

          Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
      env:
        AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_PAT)
    - task: PublishBuildArtifacts@1
      displayName: 'Upload Plan as Artifact'
      inputs:
        pathtoPublish: tfplan
        artifactName: 'Terraform Plan $(System.PullRequest.PullRequestId)'

- stage: apply
  displayName: Apply
  condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
  dependsOn: []
  jobs:
  - job: apply
    displayName: Terraform Apply
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      persistCredentials: true
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(TF_VERSION)'
    - task: GoogleCloudSdkToolInstaller@0
      displayName: 'Install gcloud CLI'
    - script: |
        # Get an access token for the managed identity
        ACCESS_TOKEN=$(az identity get-token --resource "https://management.azure.com/" --query "accessToken" --output tsv)

        # Configure Git to use the 'manager' credential helper
        git config --global credential.helper manager

        # Authenticate to your Git repository
        git config --global credential.https://dev.azure.com.username ${{ variables.System.AccessToken }}
        git config --global credential.https://dev.azure.com.password $ACCESS_TOKEN 

        gcloud auth activate-service-account --key-file <(echo "$ACCESS_TOKEN")
        gcloud config set auth/credential_file_override $(GOOGLE_CREDENTIALS)
        gcloud storage cp -r "gs://$(FAST_OUTPUTS_BUCKET)/providers/$(TF_PROVIDERS_FILE_PLAN)" ./providers.tf
        ${{ each f in parameters.tf_var_files }}:
          gcloud storage cp gs://$(FAST_OUTPUTS_BUCKET)/tfvars/${{ f }} ./
        ${{ end }}
      displayName: 'Setup Git and GCP Authentication'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Plan Artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Terraform Plan $(System.PullRequest.PullRequestId)'
        downloadPath: '$(System.ArtifactsDirectory)'
    - script: |
        terraform init -no-color
        terraform apply -no-color -auto-approve $(System.ArtifactsDirectory)/tfplan
      displayName: 'Terraform Apply'